name: Deploy to VPS

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Docker Buildx (optional, but helpful for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t whiterunguard .

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker tag whiterunguard ${{ secrets.DOCKER_USERNAME }}/whiterunguard:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/whiterunguard:latest

      # Step 6: SSH into the VPS and run commands
      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@v0.1.1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Step 7: Stop and remove the old container
            sudo docker stop whiterunguard || true
            sudo docker rm whiterunguard || true

            # Step 8: Pull the updated Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/whiterunguard:latest

            # Step 9: Run the new container with the desired settings
            sudo docker run -d \
              --name whiterunguard \
              -it \ 
              -d \
              -v whiterun_config_volume:/etc/opt/nosniktaj/ \
              -e WHITERUN_DISCORD_TOKEN=${{ secrets.WHITERUN_DISCORD_TOKEN}} \
              ${{ secrets.DOCKER_USERNAME }}/whiterunguard:latest
